@page "/register"
@layout EmptyLayout
@using FurnitureEmporium.Authentication
@using FurnitureEmporium.Models.Entity
@using FurnitureEmporium.Models.Interface
@inject IUserinterface UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="register-container">
    <div class="register-card">
        <h2 class="register-title">Register</h2>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <form @onsubmit="HandleRegister">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" class="form-control" @bind="Username" placeholder="Enter your username" required>
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" class="form-control" @bind="Email" placeholder="Enter your email" required>
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" class="form-control" @bind="Password" placeholder="Enter your password" required>
            </div>

            <button type="submit" class="btn btn-primary w-100 mb-2">Register</button>

            <p class="login-link">
                Already a member? <a href="/login">Login</a>
            </p>
        </form>
    </div>
</div>

@code {
    private string Username { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task HandleRegister()
    {
        ErrorMessage = string.Empty;

        var user = new UserClass
            {
                Username = Username,
                Email = Email,
                Password = Password // Ideally hash before saving
            };

        var isRegistered = await UserService.RegisterUserAsync(user);

        if (isRegistered)
        {
            // Log in user immediately after registration
            var isAuthenticated = await UserService.AuthenticateUserAsync(Email, Password);

            if (isAuthenticated)
            {
                // Get the userId for the authenticated user
                var userId = await UserService.GetUserIdByEmailAsync(Email);

                // Trigger state update for AuthenticationStateProvider
                var customAuthProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                customAuthProvider.MarkUserAsAuthenticated(Username, Email, userId);

                Navigation.NavigateTo("/");
            }
        }
        else
        {
            ErrorMessage = "The email address is already registered.";
        }
    }
}
