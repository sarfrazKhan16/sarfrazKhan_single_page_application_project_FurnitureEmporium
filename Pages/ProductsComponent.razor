@page "/products"
@using FurnitureEmporium.Models.Entity
@using FurnitureEmporium.Models.Interface
@inject IProductRepository ProductRepository
@inject NavigationManager Navigation

<div class="filter-panel container my-4 p-4 rounded">
    <div class="row g-3 align-items-center">
        <!-- Search Product -->
        <div class="col-md-3">
            <label for="searchProduct" class="form-label">Search Product</label>
            <input type="text" class="form-control" id="searchProduct" placeholder="Type to search...">
        </div>

        <!-- Select Category -->
        <div class="col-md-2">
            <label for="selectCategory" class="form-label">Select Category</label>
            <select class="form-select" id="selectCategory">
                <option>all</option>
                <option>Furniture</option>
                <option>Decor</option>
                <option>Lighting</option>
            </select>
        </div>

        <!-- Select Company -->
        <div class="col-md-2">
            <label for="selectCompany" class="form-label">Select Company</label>
            <select class="form-select" id="selectCompany">
                <option>all</option>
                <option>Ikea</option>
                <option>Wayfair</option>
                <option>Overstock</option>
            </select>
        </div>

        <!-- Sort By -->
        <div class="col-md-2">
            <label for="sortBy" class="form-label">Sort By</label>
            <select class="form-select" id="sortBy">
                <option>a-z</option>
                <option>z-a</option>
                <option>Price: Low to High</option>
                <option>Price: High to Low</option>
            </select>
        </div>
    </div>

    <div class="row g-3 align-items-center mt-3">
        <!-- Price Slider -->
        <div class="col-md-3">
            <label for="priceRange" class="form-label">Select Price</label>
            <input type="range" class="form-range" min="0" max="1000" step="10" id="priceRange" value="500">
            <div class="d-flex justify-content-between">
                <span>$0</span>
                <span id="priceDisplay">$500.00</span>
                <span>Max: $1,000.00</span>
            </div>
        </div>

        <!-- Free Shipping Toggle -->
        <div class="col-md-2 d-flex align-items-center">
            <label class="form-check-label me-2" for="freeShipping">Free Shipping</label>
            <input type="checkbox" class="form-check-input" id="freeShipping">
        </div>

        <!-- Search & Reset Buttons -->
        <div class="col-md-2 d-flex">
            <button class="btn btn-primary w-100 me-2">Search</button>
            <button class="btn btn-secondary w-100">Reset</button>
        </div>
    </div>
</div>

<p class="mt-4">@products?.Count() products</p>

<!-- Product Cards Section -->
<div class="container my-5">
    <div class="row">
        @if (products != null && products.Any())
        {
            foreach (var product in products)
            {
                <div class="col-md-4">
                    <div class="product-card" @onclick="() => NavigateToDescription(product.Id)">
                        <img src="@product.ImageUrl" alt="@product.Name" class="product-image">
                        <h5 class="product-title">@product.Name</h5>
                        <p class="product-price">$@product.Price</p>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No products available.</p>
        }
    </div>
</div>

<style>
    /* Filter Panel Styling */
    .filter-panel {
        background-color: #f0f7ff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* Labels and Text */
    .form-label {
        font-weight: 600;
        color: #1a1a2e;
    }

    /* Button Styling */
    .btn-primary {
        background-color: #007bff;
        border: none;
        border-radius: 5px;
        font-weight: bold;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #d63384;
        border: none;
        border-radius: 5px;
        font-weight: bold;
    }

        .btn-secondary:hover {
            background-color: #b02a6b;
        }

    /* Price Range Display */
    #priceDisplay {
        color: #1a1a2e;
        font-weight: 600;
    }

    /* Product Card Styling */
    .product-card {
        background-color: white;
        border-radius: 10px;
        padding: 1.5rem;
        text-align: center;
        transition: box-shadow 0.3s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
        height: 350px; /* Fixed height for uniformity */
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .product-card:hover {
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

    /* Product Image Styling */
    .product-image {
        width: 100%;
        height: 180px; /* Fixed height for images */
        object-fit: cover;
        border-radius: 8px;
        margin-bottom: 1rem;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image {
        transform: scale(1.05);
    }

    /* Product Title */
    .product-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #1a1a2e;
        margin-top: 0.5rem;
        text-align: center;
        height: 50px; /* Fixed height for uniformity */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Product Price */
    .product-price {
        font-size: 1.1rem;
        color: #6f42c1;
        font-weight: 600;
        margin-top: 0.5rem;
    }
</style>

@code {
    private IEnumerable<Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductRepository.GetProductsAsync();
    }

    private void NavigateToDescription(int productId)
    {
        Navigation.NavigateTo($"/product/{productId}");
    }
}
