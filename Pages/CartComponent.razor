@page "/cart"
@using FurnitureEmporium.Models.Entity
@using FurnitureEmporium.Models.Interface
@inject ICartRepository CartRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container my-5">
    <h2 class="section-title">Shopping Cart</h2>

    @if (CartItems != null && CartItems.Any())
    {
        @foreach (var item in CartItems)
        {
            <div class="row align-items-center my-4">
                <!-- Product Details -->
                <div class="col-md-8 d-flex align-items-center">
                    <!-- Product Image -->
                    <img src="@item.ProductImageUrl" alt="@item.ProductName" class="product-image me-3">

                    <!-- Product Info -->
                    <div>
                        <h5 class="product-name">@item.ProductName</h5>
                        <p class="product-brand text-muted">@item.ProductCategory</p>
                        <p class="product-color">
                            Color: <span class="color-indicator"></span>
                        </p>
                    </div>
                </div>

                <!-- Product Actions -->
                <div class="col-md-2">
                    <label for="quantity-@item.Id" class="form-label">Amount</label>
                    <select class="form-select" id="quantity-@item.Id" @onchange="(e) => UpdateQuantity(item.Id, e.Value)">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <option value="@i" selected="@((item.Quantity == i).ToString())">@i</option>
                        }
                    </select>
                    <a href="#" class="remove-link" @onclick="() => RemoveFromCart(item.Id)">remove</a>
                </div>

                <!-- Product Price -->
                <div class="col-md-2 text-end">
                    <span class="product-price">$@(item.ProductPrice * item.Quantity)</span>
                </div>
            </div>
        }

        <!-- Order Summary -->
        <div class="order-summary p-4 rounded">
            <p><span>Subtotal</span><span class="float-end">$@Subtotal</span></p>
            <p><span>Shipping</span><span class="float-end">$@Shipping</span></p>
            <p><span>Tax</span><span class="float-end">$@Tax</span></p>
            <hr>
            <p class="order-total"><strong>Order Total</strong><span class="float-end">$@Total</span></p>
        </div>

        <button class="btn btn-primary w-100 mt-4">Checkout</button>
    }
    else
    {
        <p>Your cart is empty.</p>
    }
</div>

<style>
    /* Section Title */
    .section-title {
        font-size: 1.8rem;
        font-weight: bold;
        color: #1a1a2e;
        margin-bottom: 1.5rem;
    }

    /* Product Image */
    .product-image {
        width: 100px;
        height: 100px;
        border-radius: 10px;
        object-fit: cover; /* Ensures the image fits perfectly */
    }

    /* Product Info */
    .product-name {
        font-size: 1.2rem;
        font-weight: bold;
        color: #1a1a2e;
    }

    .product-brand {
        font-size: 0.9rem;
    }

    .product-color {
        font-size: 1rem;
    }

    .color-indicator {
        display: inline-block;
        width: 15px;
        height: 15px;
        background-color: #ff5a5a;
        border-radius: 50%;
        margin-left: 5px;
    }

    /* Amount Selector and Remove Link */
    .form-select {
        width: 80px;
        margin-top: 0.5rem;
    }

    .remove-link {
        display: block;
        font-size: 0.9rem;
        color: #007bff;
        text-decoration: none;
        margin-top: 0.5rem;
    }

        .remove-link:hover {
            text-decoration: underline;
        }

    /* Product Price */
    .product-price {
        font-size: 1.2rem;
        font-weight: bold;
        color: #1a1a2e;
    }

    /* Order Summary */
    .order-summary {
        background-color: #f0f7ff;
        color: #1a1a2e;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        margin-top: 2rem;
    }

        .order-summary p {
            font-size: 1rem;
            margin: 0.5rem 0;
        }

    .order-total {
        font-size: 1.2rem;
    }

    /* Login Button */
    .btn-primary {
        background-color: #007bff;
        border: none;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 5px;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>

@code {
    private List<Cart> CartItems = new();
    private decimal Subtotal = 0;
    private decimal Shipping = 5; // Static for now
    private decimal Tax = 0;
    private decimal Total = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var userId = int.Parse(user.FindFirst("UserId").Value); // Assuming "UserId" claim exists
            CartItems = (await CartRepository.GetCartByUserIdAsync(userId)).ToList();
        }
        else
        {
            CartItems = new List<Cart>();
        }

        CalculateTotals();
    }


    private void CalculateTotals()
    {
        Subtotal = CartItems.Sum(item => item.ProductPrice * item.Quantity);
        Tax = Subtotal * 0.1m; // Assuming 10% tax
        Total = Subtotal + Shipping + Tax;
    }

    private async Task UpdateQuantity(int cartItemId, object value)
    {
        int quantity = int.Parse(value.ToString());
        await CartRepository.UpdateCartItemQuantityAsync(cartItemId, quantity);
        CartItems.First(item => item.Id == cartItemId).Quantity = quantity;
        CalculateTotals();
    }

    private async Task RemoveFromCart(int cartItemId)
    {
        await CartRepository.RemoveFromCartAsync(cartItemId);
        CartItems.RemoveAll(item => item.Id == cartItemId);
        CalculateTotals();
    }
}
