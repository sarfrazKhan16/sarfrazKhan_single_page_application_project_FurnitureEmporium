@page "/admin-products"
@layout AdminLayout
@using FurnitureEmporium.Models.Entity
@using FurnitureEmporium.Models.Interface
@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager

<h2 class="text-center my-4">Admin: Manage Products</h2>

@if (Products != null && Products.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Created At</th>
                    <th>Price</th>
                    <th>Image</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Products)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>@product.Name</td>
                        <td>@product.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>$@product.Price</td>
                        <td>
                            <img src="@product.ImageUrl" alt="@product.Name" class="product-image">
                        </td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => UpdateProduct(product.Id)">Update</button>
                            <button class="btn btn-danger btn-sm ml-2" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p class="text-center text-muted">No products found.</p>
}

<style>
    .product-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
    }
</style>

@code {
    private List<Product> Products;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        Products = (await ProductRepository.GetProductsAsync()).ToList();
    }

    private async Task DeleteProduct(int productId)
    {
        var isDeleted = await ProductRepository.DeleteProductAsync(productId);
        if (isDeleted)
        {
            // Reload the products after deletion
            await LoadProductsAsync();
        }
        else
        {
            // Handle error if needed
            Console.WriteLine("Failed to delete product.");
        }
    }

    private void UpdateProduct(int productId)
    {
        // Navigate to the AddProductComponent for updating the product
        NavigationManager.NavigateTo($"/add-product/{productId}");
    }
}
