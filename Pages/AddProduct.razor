@page "/add-product/{ProductId:int?}"
@layout AdminLayout
@using FurnitureEmporium.Models.Entity
@using FurnitureEmporium.Models.Interface
@inject IProductRepository ProductRepository
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager

<div class="container">
    <h2>@(IsEditMode ? "Update Product" : "Add Product")</h2>

    <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="product.Name" />
            <ValidationMessage For="@(() => product.Name)" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="product.Description" />
            <ValidationMessage For="@(() => product.Description)" />
        </div>

        <div class="form-group">
            <label for="category">Category</label>
            <InputSelect id="category" class="form-control" @bind-Value="product.Category">
                <option value="">Select a category</option>
                <option value="Furniture">Furniture</option>
                <option value="Decor">Decor</option>
                <option value="Appliances">Appliances</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="image">Upload Image</label>
            <InputFile id="image" class="form-control" OnChange="HandleFileSelected" />
            <p>@imageName</p>
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-primary">@ButtonText</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? ProductId { get; set; }

    private Product product = new Product();
    private string imageName = "";
    private bool IsEditMode => ProductId.HasValue;
    private string ButtonText => IsEditMode ? "Update Product" : "Add Product";

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            product = await ProductRepository.GetProductByIdAsync(ProductId.Value);

            if (product == null)
            {
                Console.WriteLine("Product not found.");
                NavigationManager.NavigateTo("/admin-products");
            }
            else
            {
                imageName = Path.GetFileName(product.ImageUrl);
            }
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        imageName = file.Name;

        var maxAllowedSize = 5242880; // 5 MB
        var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "images", file.Name);

        using var fileStream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize).CopyToAsync(fileStream);

        product.ImageUrl = $"images/{file.Name}";
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (IsEditMode)
            {
                bool isUpdated = await ProductRepository.UpdateProductAsync(product);

                if (isUpdated)
                {
                    Console.WriteLine($"Product '{product.Name}' updated successfully!");
                }
                else
                {
                    Console.WriteLine("Failed to update product.");
                }
            }
            else
            {
                product.CreatedAt = DateTime.Now;

                bool isAdded = await ProductRepository.AddProductAsync(product);

                if (isAdded)
                {
                    Console.WriteLine($"Product '{product.Name}' added successfully!");
                }
                else
                {
                    Console.WriteLine("Failed to add product.");
                }
            }

            NavigationManager.NavigateTo("/admin-products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
